---
name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: Run Linter
        run: go fmt ./...
      - name: Run Tests
        run: go test -v ./...
      - name: Build Go binary
        run: go build -v -o main .
      - name: Build Docker image
        run: docker build -t golang-helloworld:${{ github.sha }} .
      - name: Save artifact
        uses: actions/upload-artifact@v4
        with:
          name: golang-helloworld
          path: main

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: build-test
    runs-on: ubuntu-latest
    env:
      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
      YC_TOKEN: ${{ secrets.YC_TOKEN }}
      YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
      YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve

      - name: Get external IP from Terraform
        working-directory: terraform
        id: tfoutput
        run: echo "VM_IP=$(terraform output -raw external_ip_address_vm_1)" >> $GITHUB_ENV
        
      - name: Wait for SSH
        env:
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          VM_IP: ${{ env.VM_IP }}
        run: |
          echo "$SSH_KEY" > key.pem
          chmod 600 key.pem
          for i in {1..10}; do
            if ssh -o StrictHostKeyChecking=no -i key.pem $SSH_USERNAME@$VM_IP 'echo SSH OK'; then
           break
          fi
          sleep 10
          done

      
      - name: Deploy to Yandex Cloud VM (Deploy docker)
        env:
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
        run: |
          echo "$SSH_KEY" > key.pem
          chmod 600 key.pem
          scp -o StrictHostKeyChecking=no -i key.pem -r . $SSH_USERNAME@$VM_IP:~/app
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@$VM_IP << 'EOF'
            if ! command -v docker &>/dev/null; then
              echo "Docker не найден, устанавливаем..."
              curl -fsSL https://get.docker.com | sudo sh
              sudo usermod -aG docker $USER
            fi
            cd ~/app
            docker build -t golang-helloworld .
            docker stop golang-helloworld || true
            docker rm golang-helloworld || true
            docker run -d -p 8080:8080 golang-helloworld
          EOF


      - name: Telegram notify
        if: always()
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            message="CI завершён для ${GITHUB_REPOSITORY}\nСтатус deploy: ${{ job.status }}\nВетка: ${GITHUB_REF}\nCommit: ${GITHUB_SHA}\nВремя: $(date '+%Y-%m-%d %H:%M:%S')"
          else
            message="CI завершился с ошибкой для ${GITHUB_REPOSITORY}\nСтатус deploy: ${{ job.status }}\nВетка: ${GITHUB_REF}\nCommit: ${GITHUB_SHA}\nВремя: $(date '+%Y-%m-%d %H:%M:%S')"
          fi
          curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
          -d chat_id="${CHAT_ID}" \
          -d text="$message"
