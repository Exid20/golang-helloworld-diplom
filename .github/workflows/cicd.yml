name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: Run GolangCI-Lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.55.2

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: Run Tests with Coverage
        run: go test -v -cover ./...

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Build Docker image
        run: docker build -t golang-helloworld:${{ github.sha }} .
      - name: Save Docker Image as Artifact
        run: docker save golang-helloworld:${{ github.sha }} | gzip > golang-helloworld.tar.gz
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: golang-helloworld
          path: golang-helloworld.tar.gz

  terraform:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: docker-build
    env:
      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
      YC_TOKEN: ${{ secrets.YC_TOKEN }}
      YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
      YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
    outputs:
      vm_ip: ${{ steps.tfoutput.outputs.VM_IP }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Format Check
        working-directory: terraform
        run: terraform fmt -check
      - name: Terraform Validate
        working-directory: terraform
        run: terraform validate
      - name: Terraform Init
        working-directory: terraform
        run: terraform init
      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve
      - name: Get external IP from Terraform
        id: tfoutput
        working-directory: terraform
        run: echo "VM_IP=$(terraform output -raw external_ip_address_vm_1)" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: terraform
    env:
      SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
      SSH_KEY: ${{ secrets.SSH_KEY }}
      VM_IP: ${{ needs.terraform.outputs.vm_ip }}
    steps:
      - uses: actions/checkout@v3
      - name: Download docker artifact
        uses: actions/download-artifact@v4
        with:
          name: golang-helloworld
          path: ./docker
      - name: Wait for SSH
        run: |
          echo "$SSH_KEY" > key.pem
          chmod 600 key.pem
          for i in {1..10}; do
            if ssh -o StrictHostKeyChecking=no -i key.pem $SSH_USERNAME@$VM_IP 'echo SSH OK'; then
              break
            fi
            sleep 5
          done
      - name: Deploy to Yandex Cloud VM (docker compose)
        run: |
          echo "$SSH_KEY" > key.pem
          chmod 600 key.pem
          scp -o StrictHostKeyChecking=no -i key.pem -r . $SSH_USERNAME@$VM_IP:~/app
          ssh -o StrictHostKeyChecking=no -i key.pem $SSH_USERNAME@$VM_IP << 'EOF'
            if ! command -v docker &>/dev/null; then
              echo "Docker не найден, устанавливаем..."
              curl -fsSL https://get.docker.com | sudo sh
              sudo usermod -aG docker $USER
            fi

            if ! command -v docker compose &>/dev/null; then
              echo "Docker Compose не найден, устанавливаем..."
              sudo apt-get update
              sudo apt-get install -y docker-compose-plugin
            fi

            cd ~/app
            sudo docker compose down || true
            sudo docker compose up --build -d
          EOF

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Telegram notify
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          JOB_STATUS: ${{ needs.deploy.result }}
        run: |
          if [ "$JOB_STATUS" == "success" ]; then
            message="✅ CI/CD завершён успешно для ${GITHUB_REPOSITORY}\nВетка: ${GITHUB_REF}\nCommit: ${GITHUB_SHA}"
          else
            message="❌ Ошибка в CI/CD для ${GITHUB_REPOSITORY}\nВетка: ${GITHUB_REF}\nCommit: ${GITHUB_SHA}"
          fi

          curl -s -X POST "https://api.telegram.org/bot${BOT_TOKEN}/sendMessage" \
          -d chat_id="${CHAT_ID}" \
          -d text="$message"
