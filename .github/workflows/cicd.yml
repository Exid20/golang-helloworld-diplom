name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Run Linter
        run: go fmt ./...

      - name: Run Tests
        run: go test -v ./...

      - name: Build Go binary
        run: go build -v -o main .

      - name: Build Docker image
        run: docker build -t golang-helloworld:${{ github.sha }} .

      - name: Save artifact
        uses: actions/upload-artifact@v4
        with:
          name: golang-helloworld
          path: main

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: build-test
    runs-on: ubuntu-latest
    env:
      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
      YC_TOKEN: ${{ secrets.YC_TOKEN }}
      YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
      YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Check and Import existing VM
        working-directory: terraform
        env:
          YC_TOKEN: ${{ secrets.YC_TOKEN }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
        run: |
          sudo apt-get update && sudo apt-get install -y jq curl

          VM_NAME="helloworld-vm"
          API_URL="https://compute.api.cloud.yandex.net/compute/v1/instances?folderId=${YC_FOLDER_ID}&filter=name%3D'${VM_NAME}'"

          resp=$(curl -s -H "Authorization: Bearer ${YC_TOKEN}" "${API_URL}")
          vm_id=$(echo "$resp" | jq -r '.instances[0].id // empty')

          if [ -n "$vm_id" ]; then
            echo "VM ${VM_NAME} уже существует, пробуем импортировать..."
            terraform state list | grep "yandex_compute_instance.vm-1" || terraform import yandex_compute_instance.vm-1 "$vm_id"
          else
            echo "VM ${VM_NAME} не найдена, terraform создаст её."
          fi

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve

      - name: Get external IP from Terraform
        working-directory: terraform
        id: tfoutput
        run: echo "VM_IP=$(terraform output -raw external_ip_address_vm_1)" >> $GITHUB_ENV

      - name: Wait for SSH
        env:
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          VM_IP: ${{ env.VM_IP }}
        run: |
