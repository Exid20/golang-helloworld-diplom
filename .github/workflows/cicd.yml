---
name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch:

jobs:
  lint:
    name: Lint Go Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: Run go fmt
        run: go fmt ./...

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: Run Tests with Coverage
        run: go test -v -cover ./...

  build:
    name: Build App
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: Build Go binary
        run: go build -v -o main .

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Build Docker image
        run: docker build -t golang-helloworld:${{ github.sha }} .
      - name: Save Docker image as artifact
        run: docker save golang-helloworld:${{ github.sha }} | gzip > golang-helloworld.tar.gz
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: golang-helloworld
          path: golang-helloworld.tar.gz

  deploy:
    name: Deploy to Yandex Cloud
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main'
    env:
      SSH_KEY: ${{ secrets.SSH_KEY }}
      SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
    steps:
      - uses: actions/checkout@v3

      - name: Get VM IP (manually set or from secret)
        run: echo "VM_IP=${{ secrets.VM_IP }}" >> $GITHUB_ENV

      - name: Wait for SSH
        run: |
          echo "$SSH_KEY" > key.pem
          chmod 600 key.pem
          for i in {1..10}; do
            if ssh -o StrictHostKeyChecking=no -i key.pem $SSH_USERNAME@$VM_IP 'echo SSH OK'; then
              break
            fi
            sleep 2
          done

      - name: Deploy to Yandex Cloud VM (Docker Compose)
        run: |
          echo "$SSH_KEY" > key.pem
          chmod 600 key.pem
          scp -o StrictHostKeyChecking=no -i key.pem -r . $SSH_USERNAME@$VM_IP:~/app
          ssh -o StrictHostKeyChecking=no -i key.pem $SSH_USERNAME@$VM_IP << 'EOF'
            if ! command -v docker &>/dev/null; then
              curl -fsSL https://get.docker.com | sudo sh
              sudo usermod -aG docker $USER
            fi

            if ! command -v docker compose &>/dev/null; then
              sudo apt-get update
              sudo apt-get install -y docker-compose-plugin
            fi

            cd ~/app
            sudo docker compose down || true
            sudo docker compose up --build -d
          EOF

  notify:
    name: Notify Telegram
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    env:
      BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
    steps:
      - name: Send Telegram Message
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            message="✅ CI/CD завершён успешно для ${GITHUB_REPOSITORY}\nВетка_
